openapi: 3.0.3
info:
  title: Order Service API
  version: 1.0.0
  description: API for managing orders and order items

servers:
  - url: http://localhost:8082
    description: Local environment

paths:
  /orders:
    get:
      tags: [Orders]
      summary: Get all orders
      responses:
        '200':
          description: A list of all orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    post:
      tags: [Orders]
      summary: Create a new order with items
      requestBody:
        description: Order information to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Successfully created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid request body

  /orders/{id}:
    get:
      tags: [Orders]
      summary: Get an order by ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the order to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Order found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    put:
      tags: [Orders]
      summary: Update an order by ID (including items)
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the order to update
          schema:
            type: integer
      requestBody:
        description: Updated order data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

    delete:
      tags: [Orders]
      summary: Delete an order by ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the order to delete
          schema:
            type: integer
      responses:
        '204':
          description: Order deleted successfully
        '404':
          description: Order not found

  /order-items:
    get:
      tags: [OrderItems]
      summary: Get all order items
      responses:
        '200':
          description: A list of all order items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderItem'

  /order-items/{id}:
    get:
      tags: [OrderItems]
      summary: Get an order item by ID
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the order item to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Order item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
        '404':
          description: Order item not found

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
        clientId:
          type: integer
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED]
        total:
          type: string
          example: "37.50"
        createdAt:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      example:
        id: 1
        clientId: 3
        total: "37.50"
        status: "PENDING"
        createdAt: "2025-09-30T10:18:59Z"
        items:
          - id: 1
            orderId: 1
            restaurantId: 2
            dishId: 2
            quantity: 2
            price: "25.00"
            createdAt: "2025-09-30T10:18:59Z"
          - id: 2
            orderId: 1
            restaurantId: 5
            dishId: 8
            quantity: 1
            price: "12.50"
            createdAt: "2025-09-30T10:19:30Z"

    OrderRequest:
      type: object
      required:
        - clientId
        - items
      properties:
        clientId:
          type: integer
          minimum: 0
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'
      example:
        clientId: 3
        items:
          - restaurantId: 2
            dishId: 2
            quantity: 2
          - restaurantId: 5
            dishId: 8
            quantity: 1

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          minimum: 0
        orderId:
          type: integer
          minimum: 0
        restaurantId:
          type: integer
          minimum: 0
        dishId:
          type: integer
          minimum: 0
        quantity:
          type: integer
          example: 2
        price:
          type: string
          example: "12.50"
        createdAt:
          type: string
          format: date-time

    OrderItemRequest:
      type: object
      required:
        - restaurantId
        - dishId
        - quantity
      properties:
        restaurantId:
          type: integer
          minimum: 0
        dishId:
          type: integer
          minimum: 0
        quantity:
          type: integer
          example: 2
